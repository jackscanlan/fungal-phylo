/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    fungal-phylo Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    help                = null

    //// Input parameters
    samplesheet         = null                              // input samplesheet

    //// GENOME_ASSEMBLY parameters
    assemble_only       = false                             // boolean

    //// GENOME_ANNOTATION parameters
    annotate_only       = false                             // boolean

    //// CUSTOM_MARKERS parameters
    custom_markers      = null                              // .csv of custom marker gene information

    //// EXTERNAL_GENOMES parameters
    ncbi_taxid          = null                              // NCBI txid (number) for retrieval of related genomes; integer
    repository_limit      = false                             // limit the number of external genomes retrieved to one per taxon; boolean

    //// INTERNAL_GENOMES parameters


    //// PHYLOGENOMICS parameters
    run_phylogenomics   = true                              // boolean
    align_only          = false                             // boolean

    slurm_account       = 'fruitfly'                       // account to use on SLURM; default is for BASC only

    threads             = null                              // threads for multithreading; integer

    rdata               = true                              // save all data/objects from process-level R sessions as .RData files in work dir; boolean

    ///// Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '512.GB'
    max_cpus                   = 72
    max_time                   = '168.h'
}

// process {
    // withName:'UFCG_PROFILE|UFCG_TREE' {
    //     container = "endix1029/ufcg:v1.0.5"
    // }
// }

// shifter {
    // enabled             = true
// }


profiles {
    debug {
        // 
    }
    basc_slurm {
        process.executor        = 'slurm'
        process.queue           = 'batch,shortrun'
        process.clusterOptions = "--account $params.slurm_account"
        params.max_memory       = '512.GB'
        params.max_time         = '168.h'
        params.max_cpus         = 48
        // process.module          = 'shifter' // this runs 'module load shifter' at the start of each process job
        // // process.beforeScript    = 'module load shifter' // this would also do the same thing as above line
        // shifter.enabled         = true
    }
    test { /// this profile should always be specified last to force the minimal resource requirements
        params.max_memory       = '32.GB'
        params.max_time         = '10.m'
        params.max_cpus         = 8
    }
}

process {

    // error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // resources based on labels
    withLabel: very_small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 10.m * task.attempt, 'time'    ) }
    }
    withLabel: small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h * task.attempt, 'time'    ) }
    }
    withLabel: medium {
        cpus    = { check_max( 8 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h * task.attempt, 'time'     ) }
    }
    withLabel: high {
        cpus    = { check_max( 16 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 12.h *  task.attempt, 'time'    ) }
    }
    withLabel: very_high {
        cpus    = { check_max( 24 * task.attempt  , 'cpus'    ) }
        memory  = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 12.h *  task.attempt, 'time'    ) }
    }
    withLabel: long {
        time    = { check_max( 4.h * task.attempt, 'time'    ) }
    }
    withLabel: ncbi {
        maxForks = 1 // this is to limit parallel requests for NCBI API
    }

    // resources based on names
    withName: QUAST_REPOSITORY {
        cpus    = { check_max( 1 * task.attempt   , 'cpus'    ) }
        time    = { check_max( 30.m *  task.attempt, 'time'    ) }
    }
    withName: UFCG_PROFILE {
        cpus    = { check_max( 8 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 4.h *  task.attempt, 'time'    ) }
    }


}





plugins {
    id 'nf-schema@2.0.0'                            // create schema to validate sample sheets and pipeline parameters
}

report {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/report.html"
}

trace {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/trace.tsv"
}

dag {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/dag.html"
    verbose             = true
}

timeline {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/timeline.html"
}

// executor {
//     // name                = "local"
//     // cpus = 1 // restricts pipeline cpu use to single core (ie. no parallel processes) 
// }

// Function to ensure that resource requirements don't go beyond a maximum limit
// from: https://github.com/nf-core/tools/blob/99961bedab1518f592668727a4d692c4ddf3c336/nf_core/pipeline-template/nextflow.config#L206-L237
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}